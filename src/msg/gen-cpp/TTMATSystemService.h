/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TTMATSystemService_H
#define TTMATSystemService_H

#include <thrift/TDispatchProcessor.h>
#include "ttmat_internal_types.h"

namespace ttmat {

class TTMATSystemServiceIf {
 public:
  virtual ~TTMATSystemServiceIf() {}
  virtual void getMailboxTTMAT(MailboxTTMAT& _return, const  ::authentication::User& user, const std::string& date) = 0;
};

class TTMATSystemServiceIfFactory {
 public:
  typedef TTMATSystemServiceIf Handler;

  virtual ~TTMATSystemServiceIfFactory() {}

  virtual TTMATSystemServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TTMATSystemServiceIf* /* handler */) = 0;
};

class TTMATSystemServiceIfSingletonFactory : virtual public TTMATSystemServiceIfFactory {
 public:
  TTMATSystemServiceIfSingletonFactory(const boost::shared_ptr<TTMATSystemServiceIf>& iface) : iface_(iface) {}
  virtual ~TTMATSystemServiceIfSingletonFactory() {}

  virtual TTMATSystemServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TTMATSystemServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TTMATSystemServiceIf> iface_;
};

class TTMATSystemServiceNull : virtual public TTMATSystemServiceIf {
 public:
  virtual ~TTMATSystemServiceNull() {}
  void getMailboxTTMAT(MailboxTTMAT& /* _return */, const  ::authentication::User& /* user */, const std::string& /* date */) {
    return;
  }
};

typedef struct _TTMATSystemService_getMailboxTTMAT_args__isset {
  _TTMATSystemService_getMailboxTTMAT_args__isset() : user(false), date(false) {}
  bool user;
  bool date;
} _TTMATSystemService_getMailboxTTMAT_args__isset;

class TTMATSystemService_getMailboxTTMAT_args {
 public:

  static const char* ascii_fingerprint; // = "1ADFA84B8DAB42EBCBE507E260DC6587";
  static const uint8_t binary_fingerprint[16]; // = {0x1A,0xDF,0xA8,0x4B,0x8D,0xAB,0x42,0xEB,0xCB,0xE5,0x07,0xE2,0x60,0xDC,0x65,0x87};

  TTMATSystemService_getMailboxTTMAT_args() : date() {
  }

  virtual ~TTMATSystemService_getMailboxTTMAT_args() throw() {}

   ::authentication::User user;
  std::string date;

  _TTMATSystemService_getMailboxTTMAT_args__isset __isset;

  void __set_user(const  ::authentication::User& val) {
    user = val;
  }

  void __set_date(const std::string& val) {
    date = val;
  }

  bool operator == (const TTMATSystemService_getMailboxTTMAT_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(date == rhs.date))
      return false;
    return true;
  }
  bool operator != (const TTMATSystemService_getMailboxTTMAT_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTMATSystemService_getMailboxTTMAT_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TTMATSystemService_getMailboxTTMAT_pargs {
 public:

  static const char* ascii_fingerprint; // = "1ADFA84B8DAB42EBCBE507E260DC6587";
  static const uint8_t binary_fingerprint[16]; // = {0x1A,0xDF,0xA8,0x4B,0x8D,0xAB,0x42,0xEB,0xCB,0xE5,0x07,0xE2,0x60,0xDC,0x65,0x87};


  virtual ~TTMATSystemService_getMailboxTTMAT_pargs() throw() {}

  const  ::authentication::User* user;
  const std::string* date;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TTMATSystemService_getMailboxTTMAT_result__isset {
  _TTMATSystemService_getMailboxTTMAT_result__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _TTMATSystemService_getMailboxTTMAT_result__isset;

class TTMATSystemService_getMailboxTTMAT_result {
 public:

  static const char* ascii_fingerprint; // = "58987141EAE74F4CBCE220505061C964";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x98,0x71,0x41,0xEA,0xE7,0x4F,0x4C,0xBC,0xE2,0x20,0x50,0x50,0x61,0xC9,0x64};

  TTMATSystemService_getMailboxTTMAT_result() {
  }

  virtual ~TTMATSystemService_getMailboxTTMAT_result() throw() {}

  MailboxTTMAT success;
  InvalidOperation ouch;

  _TTMATSystemService_getMailboxTTMAT_result__isset __isset;

  void __set_success(const MailboxTTMAT& val) {
    success = val;
  }

  void __set_ouch(const InvalidOperation& val) {
    ouch = val;
  }

  bool operator == (const TTMATSystemService_getMailboxTTMAT_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const TTMATSystemService_getMailboxTTMAT_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTMATSystemService_getMailboxTTMAT_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TTMATSystemService_getMailboxTTMAT_presult__isset {
  _TTMATSystemService_getMailboxTTMAT_presult__isset() : success(false), ouch(false) {}
  bool success;
  bool ouch;
} _TTMATSystemService_getMailboxTTMAT_presult__isset;

class TTMATSystemService_getMailboxTTMAT_presult {
 public:

  static const char* ascii_fingerprint; // = "58987141EAE74F4CBCE220505061C964";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x98,0x71,0x41,0xEA,0xE7,0x4F,0x4C,0xBC,0xE2,0x20,0x50,0x50,0x61,0xC9,0x64};


  virtual ~TTMATSystemService_getMailboxTTMAT_presult() throw() {}

  MailboxTTMAT* success;
  InvalidOperation ouch;

  _TTMATSystemService_getMailboxTTMAT_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TTMATSystemServiceClient : virtual public TTMATSystemServiceIf {
 public:
  TTMATSystemServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TTMATSystemServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getMailboxTTMAT(MailboxTTMAT& _return, const  ::authentication::User& user, const std::string& date);
  void send_getMailboxTTMAT(const  ::authentication::User& user, const std::string& date);
  void recv_getMailboxTTMAT(MailboxTTMAT& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TTMATSystemServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TTMATSystemServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TTMATSystemServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getMailboxTTMAT(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TTMATSystemServiceProcessor(boost::shared_ptr<TTMATSystemServiceIf> iface) :
    iface_(iface) {
    processMap_["getMailboxTTMAT"] = &TTMATSystemServiceProcessor::process_getMailboxTTMAT;
  }

  virtual ~TTMATSystemServiceProcessor() {}
};

class TTMATSystemServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TTMATSystemServiceProcessorFactory(const ::boost::shared_ptr< TTMATSystemServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TTMATSystemServiceIfFactory > handlerFactory_;
};

class TTMATSystemServiceMultiface : virtual public TTMATSystemServiceIf {
 public:
  TTMATSystemServiceMultiface(std::vector<boost::shared_ptr<TTMATSystemServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TTMATSystemServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TTMATSystemServiceIf> > ifaces_;
  TTMATSystemServiceMultiface() {}
  void add(boost::shared_ptr<TTMATSystemServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getMailboxTTMAT(MailboxTTMAT& _return, const  ::authentication::User& user, const std::string& date) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMailboxTTMAT(_return, user, date);
    }
    ifaces_[i]->getMailboxTTMAT(_return, user, date);
    return;
  }

};

} // namespace

#endif
